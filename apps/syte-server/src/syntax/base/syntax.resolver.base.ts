/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Syntax } from "./Syntax";
import { SyntaxCountArgs } from "./SyntaxCountArgs";
import { SyntaxFindManyArgs } from "./SyntaxFindManyArgs";
import { SyntaxFindUniqueArgs } from "./SyntaxFindUniqueArgs";
import { CreateSyntaxArgs } from "./CreateSyntaxArgs";
import { UpdateSyntaxArgs } from "./UpdateSyntaxArgs";
import { DeleteSyntaxArgs } from "./DeleteSyntaxArgs";
import { CodeFileFindManyArgs } from "../../codeFile/base/CodeFileFindManyArgs";
import { CodeFile } from "../../codeFile/base/CodeFile";
import { SyntaxService } from "../syntax.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Syntax)
export class SyntaxResolverBase {
  constructor(
    protected readonly service: SyntaxService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Syntax",
    action: "read",
    possession: "any",
  })
  async _syntaxesMeta(
    @graphql.Args() args: SyntaxCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Syntax])
  @nestAccessControl.UseRoles({
    resource: "Syntax",
    action: "read",
    possession: "any",
  })
  async syntaxes(@graphql.Args() args: SyntaxFindManyArgs): Promise<Syntax[]> {
    return this.service.syntaxes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Syntax, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Syntax",
    action: "read",
    possession: "own",
  })
  async syntax(
    @graphql.Args() args: SyntaxFindUniqueArgs
  ): Promise<Syntax | null> {
    const result = await this.service.syntax(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Syntax)
  @nestAccessControl.UseRoles({
    resource: "Syntax",
    action: "create",
    possession: "any",
  })
  async createSyntax(@graphql.Args() args: CreateSyntaxArgs): Promise<Syntax> {
    return await this.service.createSyntax({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Syntax)
  @nestAccessControl.UseRoles({
    resource: "Syntax",
    action: "update",
    possession: "any",
  })
  async updateSyntax(
    @graphql.Args() args: UpdateSyntaxArgs
  ): Promise<Syntax | null> {
    try {
      return await this.service.updateSyntax({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Syntax)
  @nestAccessControl.UseRoles({
    resource: "Syntax",
    action: "delete",
    possession: "any",
  })
  async deleteSyntax(
    @graphql.Args() args: DeleteSyntaxArgs
  ): Promise<Syntax | null> {
    try {
      return await this.service.deleteSyntax(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [CodeFile], { name: "codeFiles" })
  @nestAccessControl.UseRoles({
    resource: "CodeFile",
    action: "read",
    possession: "any",
  })
  async findCodeFiles(
    @graphql.Parent() parent: Syntax,
    @graphql.Args() args: CodeFileFindManyArgs
  ): Promise<CodeFile[]> {
    const results = await this.service.findCodeFiles(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
