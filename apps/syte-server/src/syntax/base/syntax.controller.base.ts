/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SyntaxService } from "../syntax.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SyntaxCreateInput } from "./SyntaxCreateInput";
import { Syntax } from "./Syntax";
import { SyntaxFindManyArgs } from "./SyntaxFindManyArgs";
import { SyntaxWhereUniqueInput } from "./SyntaxWhereUniqueInput";
import { SyntaxUpdateInput } from "./SyntaxUpdateInput";
import { CodeFileFindManyArgs } from "../../codeFile/base/CodeFileFindManyArgs";
import { CodeFile } from "../../codeFile/base/CodeFile";
import { CodeFileWhereUniqueInput } from "../../codeFile/base/CodeFileWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SyntaxControllerBase {
  constructor(
    protected readonly service: SyntaxService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Syntax })
  @nestAccessControl.UseRoles({
    resource: "Syntax",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSyntax(@common.Body() data: SyntaxCreateInput): Promise<Syntax> {
    return await this.service.createSyntax({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        pattern: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Syntax] })
  @ApiNestedQuery(SyntaxFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Syntax",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async syntaxes(@common.Req() request: Request): Promise<Syntax[]> {
    const args = plainToClass(SyntaxFindManyArgs, request.query);
    return this.service.syntaxes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        pattern: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Syntax })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Syntax",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async syntax(
    @common.Param() params: SyntaxWhereUniqueInput
  ): Promise<Syntax | null> {
    const result = await this.service.syntax({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        pattern: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Syntax })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Syntax",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSyntax(
    @common.Param() params: SyntaxWhereUniqueInput,
    @common.Body() data: SyntaxUpdateInput
  ): Promise<Syntax | null> {
    try {
      return await this.service.updateSyntax({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          pattern: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Syntax })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Syntax",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSyntax(
    @common.Param() params: SyntaxWhereUniqueInput
  ): Promise<Syntax | null> {
    try {
      return await this.service.deleteSyntax({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          pattern: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/codeFiles")
  @ApiNestedQuery(CodeFileFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CodeFile",
    action: "read",
    possession: "any",
  })
  async findCodeFiles(
    @common.Req() request: Request,
    @common.Param() params: SyntaxWhereUniqueInput
  ): Promise<CodeFile[]> {
    const query = plainToClass(CodeFileFindManyArgs, request.query);
    const results = await this.service.findCodeFiles(params.id, {
      ...query,
      select: {
        content: true,
        createdAt: true,
        fileName: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        syntax: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/codeFiles")
  @nestAccessControl.UseRoles({
    resource: "Syntax",
    action: "update",
    possession: "any",
  })
  async connectCodeFiles(
    @common.Param() params: SyntaxWhereUniqueInput,
    @common.Body() body: CodeFileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      codeFiles: {
        connect: body,
      },
    };
    await this.service.updateSyntax({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/codeFiles")
  @nestAccessControl.UseRoles({
    resource: "Syntax",
    action: "update",
    possession: "any",
  })
  async updateCodeFiles(
    @common.Param() params: SyntaxWhereUniqueInput,
    @common.Body() body: CodeFileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      codeFiles: {
        set: body,
      },
    };
    await this.service.updateSyntax({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/codeFiles")
  @nestAccessControl.UseRoles({
    resource: "Syntax",
    action: "update",
    possession: "any",
  })
  async disconnectCodeFiles(
    @common.Param() params: SyntaxWhereUniqueInput,
    @common.Body() body: CodeFileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      codeFiles: {
        disconnect: body,
      },
    };
    await this.service.updateSyntax({
      where: params,
      data,
      select: { id: true },
    });
  }
}
