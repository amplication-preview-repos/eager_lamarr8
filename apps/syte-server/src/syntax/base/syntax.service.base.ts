/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Syntax as PrismaSyntax,
  CodeFile as PrismaCodeFile,
} from "@prisma/client";

export class SyntaxServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SyntaxCountArgs, "select">): Promise<number> {
    return this.prisma.syntax.count(args);
  }

  async syntaxes(args: Prisma.SyntaxFindManyArgs): Promise<PrismaSyntax[]> {
    return this.prisma.syntax.findMany(args);
  }
  async syntax(
    args: Prisma.SyntaxFindUniqueArgs
  ): Promise<PrismaSyntax | null> {
    return this.prisma.syntax.findUnique(args);
  }
  async createSyntax(args: Prisma.SyntaxCreateArgs): Promise<PrismaSyntax> {
    return this.prisma.syntax.create(args);
  }
  async updateSyntax(args: Prisma.SyntaxUpdateArgs): Promise<PrismaSyntax> {
    return this.prisma.syntax.update(args);
  }
  async deleteSyntax(args: Prisma.SyntaxDeleteArgs): Promise<PrismaSyntax> {
    return this.prisma.syntax.delete(args);
  }

  async findCodeFiles(
    parentId: string,
    args: Prisma.CodeFileFindManyArgs
  ): Promise<PrismaCodeFile[]> {
    return this.prisma.syntax
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .codeFiles(args);
  }
}
