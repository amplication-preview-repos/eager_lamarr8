/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CodeFile as PrismaCodeFile,
  ErrorLog as PrismaErrorLog,
  Project as PrismaProject,
  Syntax as PrismaSyntax,
} from "@prisma/client";

export class CodeFileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CodeFileCountArgs, "select">): Promise<number> {
    return this.prisma.codeFile.count(args);
  }

  async codeFiles(
    args: Prisma.CodeFileFindManyArgs
  ): Promise<PrismaCodeFile[]> {
    return this.prisma.codeFile.findMany(args);
  }
  async codeFile(
    args: Prisma.CodeFileFindUniqueArgs
  ): Promise<PrismaCodeFile | null> {
    return this.prisma.codeFile.findUnique(args);
  }
  async createCodeFile(
    args: Prisma.CodeFileCreateArgs
  ): Promise<PrismaCodeFile> {
    return this.prisma.codeFile.create(args);
  }
  async updateCodeFile(
    args: Prisma.CodeFileUpdateArgs
  ): Promise<PrismaCodeFile> {
    return this.prisma.codeFile.update(args);
  }
  async deleteCodeFile(
    args: Prisma.CodeFileDeleteArgs
  ): Promise<PrismaCodeFile> {
    return this.prisma.codeFile.delete(args);
  }

  async findErrorLogs(
    parentId: string,
    args: Prisma.ErrorLogFindManyArgs
  ): Promise<PrismaErrorLog[]> {
    return this.prisma.codeFile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .errorLogs(args);
  }

  async getProject(parentId: string): Promise<PrismaProject | null> {
    return this.prisma.codeFile
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }

  async getSyntax(parentId: string): Promise<PrismaSyntax | null> {
    return this.prisma.codeFile
      .findUnique({
        where: { id: parentId },
      })
      .syntax();
  }
}
