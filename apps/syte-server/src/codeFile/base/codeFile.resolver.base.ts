/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CodeFile } from "./CodeFile";
import { CodeFileCountArgs } from "./CodeFileCountArgs";
import { CodeFileFindManyArgs } from "./CodeFileFindManyArgs";
import { CodeFileFindUniqueArgs } from "./CodeFileFindUniqueArgs";
import { CreateCodeFileArgs } from "./CreateCodeFileArgs";
import { UpdateCodeFileArgs } from "./UpdateCodeFileArgs";
import { DeleteCodeFileArgs } from "./DeleteCodeFileArgs";
import { ErrorLogFindManyArgs } from "../../errorLog/base/ErrorLogFindManyArgs";
import { ErrorLog } from "../../errorLog/base/ErrorLog";
import { Project } from "../../project/base/Project";
import { Syntax } from "../../syntax/base/Syntax";
import { CodeFileService } from "../codeFile.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CodeFile)
export class CodeFileResolverBase {
  constructor(
    protected readonly service: CodeFileService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CodeFile",
    action: "read",
    possession: "any",
  })
  async _codeFilesMeta(
    @graphql.Args() args: CodeFileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CodeFile])
  @nestAccessControl.UseRoles({
    resource: "CodeFile",
    action: "read",
    possession: "any",
  })
  async codeFiles(
    @graphql.Args() args: CodeFileFindManyArgs
  ): Promise<CodeFile[]> {
    return this.service.codeFiles(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CodeFile, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CodeFile",
    action: "read",
    possession: "own",
  })
  async codeFile(
    @graphql.Args() args: CodeFileFindUniqueArgs
  ): Promise<CodeFile | null> {
    const result = await this.service.codeFile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CodeFile)
  @nestAccessControl.UseRoles({
    resource: "CodeFile",
    action: "create",
    possession: "any",
  })
  async createCodeFile(
    @graphql.Args() args: CreateCodeFileArgs
  ): Promise<CodeFile> {
    return await this.service.createCodeFile({
      ...args,
      data: {
        ...args.data,

        project: args.data.project
          ? {
              connect: args.data.project,
            }
          : undefined,

        syntax: args.data.syntax
          ? {
              connect: args.data.syntax,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CodeFile)
  @nestAccessControl.UseRoles({
    resource: "CodeFile",
    action: "update",
    possession: "any",
  })
  async updateCodeFile(
    @graphql.Args() args: UpdateCodeFileArgs
  ): Promise<CodeFile | null> {
    try {
      return await this.service.updateCodeFile({
        ...args,
        data: {
          ...args.data,

          project: args.data.project
            ? {
                connect: args.data.project,
              }
            : undefined,

          syntax: args.data.syntax
            ? {
                connect: args.data.syntax,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CodeFile)
  @nestAccessControl.UseRoles({
    resource: "CodeFile",
    action: "delete",
    possession: "any",
  })
  async deleteCodeFile(
    @graphql.Args() args: DeleteCodeFileArgs
  ): Promise<CodeFile | null> {
    try {
      return await this.service.deleteCodeFile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ErrorLog], { name: "errorLogs" })
  @nestAccessControl.UseRoles({
    resource: "ErrorLog",
    action: "read",
    possession: "any",
  })
  async findErrorLogs(
    @graphql.Parent() parent: CodeFile,
    @graphql.Args() args: ErrorLogFindManyArgs
  ): Promise<ErrorLog[]> {
    const results = await this.service.findErrorLogs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Project, {
    nullable: true,
    name: "project",
  })
  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "read",
    possession: "any",
  })
  async getProject(
    @graphql.Parent() parent: CodeFile
  ): Promise<Project | null> {
    const result = await this.service.getProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Syntax, {
    nullable: true,
    name: "syntax",
  })
  @nestAccessControl.UseRoles({
    resource: "Syntax",
    action: "read",
    possession: "any",
  })
  async getSyntax(@graphql.Parent() parent: CodeFile): Promise<Syntax | null> {
    const result = await this.service.getSyntax(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
