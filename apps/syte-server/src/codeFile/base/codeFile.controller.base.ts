/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CodeFileService } from "../codeFile.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CodeFileCreateInput } from "./CodeFileCreateInput";
import { CodeFile } from "./CodeFile";
import { CodeFileFindManyArgs } from "./CodeFileFindManyArgs";
import { CodeFileWhereUniqueInput } from "./CodeFileWhereUniqueInput";
import { CodeFileUpdateInput } from "./CodeFileUpdateInput";
import { ErrorLogFindManyArgs } from "../../errorLog/base/ErrorLogFindManyArgs";
import { ErrorLog } from "../../errorLog/base/ErrorLog";
import { ErrorLogWhereUniqueInput } from "../../errorLog/base/ErrorLogWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CodeFileControllerBase {
  constructor(
    protected readonly service: CodeFileService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CodeFile })
  @nestAccessControl.UseRoles({
    resource: "CodeFile",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCodeFile(
    @common.Body() data: CodeFileCreateInput
  ): Promise<CodeFile> {
    return await this.service.createCodeFile({
      data: {
        ...data,

        project: data.project
          ? {
              connect: data.project,
            }
          : undefined,

        syntax: data.syntax
          ? {
              connect: data.syntax,
            }
          : undefined,
      },
      select: {
        content: true,
        createdAt: true,
        fileName: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        syntax: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [CodeFile] })
  @ApiNestedQuery(CodeFileFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CodeFile",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async codeFiles(@common.Req() request: Request): Promise<CodeFile[]> {
    const args = plainToClass(CodeFileFindManyArgs, request.query);
    return this.service.codeFiles({
      ...args,
      select: {
        content: true,
        createdAt: true,
        fileName: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        syntax: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CodeFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CodeFile",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async codeFile(
    @common.Param() params: CodeFileWhereUniqueInput
  ): Promise<CodeFile | null> {
    const result = await this.service.codeFile({
      where: params,
      select: {
        content: true,
        createdAt: true,
        fileName: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        syntax: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CodeFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CodeFile",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCodeFile(
    @common.Param() params: CodeFileWhereUniqueInput,
    @common.Body() data: CodeFileUpdateInput
  ): Promise<CodeFile | null> {
    try {
      return await this.service.updateCodeFile({
        where: params,
        data: {
          ...data,

          project: data.project
            ? {
                connect: data.project,
              }
            : undefined,

          syntax: data.syntax
            ? {
                connect: data.syntax,
              }
            : undefined,
        },
        select: {
          content: true,
          createdAt: true,
          fileName: true,
          id: true,

          project: {
            select: {
              id: true,
            },
          },

          syntax: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CodeFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CodeFile",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCodeFile(
    @common.Param() params: CodeFileWhereUniqueInput
  ): Promise<CodeFile | null> {
    try {
      return await this.service.deleteCodeFile({
        where: params,
        select: {
          content: true,
          createdAt: true,
          fileName: true,
          id: true,

          project: {
            select: {
              id: true,
            },
          },

          syntax: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/errorLogs")
  @ApiNestedQuery(ErrorLogFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ErrorLog",
    action: "read",
    possession: "any",
  })
  async findErrorLogs(
    @common.Req() request: Request,
    @common.Param() params: CodeFileWhereUniqueInput
  ): Promise<ErrorLog[]> {
    const query = plainToClass(ErrorLogFindManyArgs, request.query);
    const results = await this.service.findErrorLogs(params.id, {
      ...query,
      select: {
        codeFile: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        line: true,
        message: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/errorLogs")
  @nestAccessControl.UseRoles({
    resource: "CodeFile",
    action: "update",
    possession: "any",
  })
  async connectErrorLogs(
    @common.Param() params: CodeFileWhereUniqueInput,
    @common.Body() body: ErrorLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      errorLogs: {
        connect: body,
      },
    };
    await this.service.updateCodeFile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/errorLogs")
  @nestAccessControl.UseRoles({
    resource: "CodeFile",
    action: "update",
    possession: "any",
  })
  async updateErrorLogs(
    @common.Param() params: CodeFileWhereUniqueInput,
    @common.Body() body: ErrorLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      errorLogs: {
        set: body,
      },
    };
    await this.service.updateCodeFile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/errorLogs")
  @nestAccessControl.UseRoles({
    resource: "CodeFile",
    action: "update",
    possession: "any",
  })
  async disconnectErrorLogs(
    @common.Param() params: CodeFileWhereUniqueInput,
    @common.Body() body: ErrorLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      errorLogs: {
        disconnect: body,
      },
    };
    await this.service.updateCodeFile({
      where: params,
      data,
      select: { id: true },
    });
  }
}
